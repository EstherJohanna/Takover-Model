from pyschedule import Scenario
S = Scenario('takeover', horizon=35) #a takeover takes 7sec (=700dezisekunden)

#resources
Procedural = S.Resource('ProceduralMemory')
Working = S.Resource('WorkingMemory')
Declarative = S.Resource('DeclarativeMemory')
Visual = S.Resource('VisualBuffer')
Aural = S.Resource('AuralBuffer')
Head = S.Resource('HeadBuffer')
Hand = S.Resource('HandBuffer')
Eyes = S.Resource('EyesBuffer')
Feet = S.Resource('FeetBuffer')
Thorax = S.Resource('ThoraxBuffer')

class situation(object):
    
     def __init__(self):
        self.S = S
        return 
###############################################################################
#functions for all blocks
     def start(self):    
        attendAural = self.S.Task('attendAural', length = 1)#5
        self.requestMeaningSound = self.S.Task('requestMeaningSound', length = 1)#5
        self.encodeSound = self.S.Task('encodeSound', length = 1)#10
        self.changeGoal = self.S.Task('changeGoal', length = 1)#5
        self.moveAttention1 = self.S.Task('moveAttention', length = 1)#5
        #order for tasks that always need to be done:
        self.S += (attendAural <= self.encodeSound,
        self.changeGoal < self.moveAttention1)
        #resources for tasks that always need to be done:
        attendAural += Procedural
        self.encodeSound += Aural
        self.requestMeaningSound += Procedural
        self.changeGoal+= Procedural
        self.moveAttention1+= Procedural      
        return
 
     def exp(self):
         self.meaningSound = self.S.Task('meaningSound', length = 1)#10
         return
         
     def nov(self):
         self.meaningSound = self.S.Task('meaningSound', length = 1)#50
         return
    
     def meaning(self):
        self.S += (self.requestMeaningSound < self.meaningSound, self.meaningSound <= self.changeGoal,
        self.encodeSound <= self.requestMeaningSound,
        self.requestMeaningSound <= self.meaningSound, self.meaningSound < self.changeGoal)
        self.meaningSound += Declarative
        return 
        
     def lockout(self):#heck
         self.quitNDRT = self.S.Task('quitNDRT', length = 1)#5
         self.S += self.changeGoal < self.quitNDRT, self.quitNDRT < self.moveAttention1
         self.quitNDRT += Procedural
        
     def gazeOnRoad(self):#check
         #tasks
        motorPrepHead1 = self.S.Task('motorPrepHead1', length = 1)#25
        motorInitHead1 = self.S.Task('motorInitHead1', length = 1)#5
        self.moveHead1 = self.S.Task('moveHead1', length = 1)#60
        self.moveAttention2 = self.S.Task('moveAttention2', length = 1)#5
        eyeMovePrep1 = self.S.Task('eyeMovePrep1', length = 1)#25
        saccade1 = self.S.Task('saccade1', length = 1)#5
        self.encodeVisObject1 = self.S.Task('encodeVisObject1', length = 1)#9
        #order
        self.S += (self.moveAttention1 < motorPrepHead1, motorPrepHead1 <= motorInitHead1 , 
        motorInitHead1 <= self.moveHead1, self.moveAttention2 <= eyeMovePrep1,
        eyeMovePrep1 <= saccade1, saccade1 <= self.encodeVisObject1,
        self.moveAttention1 < self.moveAttention2)#self.moveAttention1 < thoraxMotoPrep
        #resources for tasks
        motorPrepHead1 += Head
        motorInitHead1 += Head
        self.moveHead1 += Head
        self.moveAttention2 += Procedural
        eyeMovePrep1 += Eyes
        saccade1 += Eyes
        self.encodeVisObject1 += Visual
        
     def turnSA(self): #check
         self.moveAttention3 = self.S.Task('moveAttention3', length = 1)#5
         eyeMovePrep2 = self.S.Task('eyeMovePrep2', length = 1)#25
         saccade2 = self.S.Task('saccade2', length = 1)#5
         encodeVisObject2 = self.S.Task('encodeVisObject2', length = 1)#9
         moveAttention4 = self.S.Task('moveAttention4', length = 1)#5
         eyeMovePrep3 = self.S.Task('eyeMovePrep3', length = 1)#25
         saccade3 = self.S.Task('saccade3', length = 1)#5
         self.encodeVisObject3 = self.S.Task('encodeVisObject3', length = 1)#9
         self.S += (self.moveAttention2 < self.moveAttention3, self.moveAttention3 <= eyeMovePrep2,
         eyeMovePrep2 <= saccade2, saccade2 <= encodeVisObject2,
         self.moveAttention3 < moveAttention4, moveAttention4 <= eyeMovePrep3,
         eyeMovePrep3 <= saccade3, saccade3 <= self.encodeVisObject3, 
         self.encodeVisObject3 < self.checkNear)
         self.moveAttention3 += Procedural
         eyeMovePrep2 += Eyes
         saccade2 += Eyes
         encodeVisObject2 += Visual
         moveAttention4 += Procedural
         eyeMovePrep3 += Eyes
         saccade3 += Eyes
         self.encodeVisObject3 += Visual

#unterschied SA und turnSA:
#in SA he still needs to turn head (which is done by function gazeOnRoad) - in both he then builds up SA. 

     def turnBody(self):
         self.thoraxMotoPrep = self.S.Task('thoraxMotoPrep', length = 1) # 25
         self.thoraxMotoIni = self.S.Task('thoraxIni', length = 1)
         self.thoraxTurn = self.S.Task('thoraxTurn', length = 1)
         self.S += (self.moveAttention1 < self.thoraxMotoPrep, 
         self. thoraxMotoPrep <= self.thoraxMotoIni,
         self.thoraxMotoIni <= self.thoraxTurn)
         self.thoraxMotoPrep += Thorax
         self.thoraxMotoIni += Thorax
         self.thoraxTurn += Thorax
         
         
     def SA(self):
         #tasks
         self.moveAttention2 = self.S.Task('moveAttention2', length = 1)#5
         eyeMovePrep1 = self.S.Task('eyeMovePrep1', length = 1)#25
         saccade1 = self.S.Task('saccade1', length = 1)#5
         encodeVisObject1 = self.S.Task('encodeVisObject1', length = 1)#9
         self.moveAttention3 = self.S.Task('moveAttention3', length = 1)#5
         eyeMovePrep2 = self.S.Task('eyeMovePrep2', length = 1)#25
         saccade2 = self.S.Task('saccade2', length = 1)#5
         encodeVisObject2 = self.S.Task('encodeVisObject2', length = 1)#9
         moveAttention4 = self.S.Task('moveAttention4', length = 1)#5
         eyeMovePrep3 = self.S.Task('eyeMovePrep3', length = 1)#25?
         saccade3 = self.S.Task('saccade3', length = 1)#5
         self.encodeVisObject3 = self.S.Task('encodeVisObject3', length = 1)#9
         #order
         self.S += (self.moveAttention2 <= eyeMovePrep1,
         eyeMovePrep1 <= saccade1, saccade1 <= encodeVisObject1,
         
         self.moveAttention1 < self.moveAttention2, self.moveAttention2 < self.moveAttention3, 
         self.moveAttention3 <= eyeMovePrep2,
         eyeMovePrep2 <= saccade2, saccade2 <= encodeVisObject2,
         self.moveAttention3 < moveAttention4, moveAttention4 <= eyeMovePrep3,
         eyeMovePrep3 <= saccade3, saccade3 <= self.encodeVisObject3)
         #resources for tasks
         self.moveAttention2 += Procedural
         eyeMovePrep1 += Eyes
         saccade1 += Eyes
         encodeVisObject1 += Visual
         self.moveAttention3 += Procedural
         eyeMovePrep2 += Eyes
         saccade2 += Eyes
         encodeVisObject2 += Visual
         moveAttention4 += Procedural
         eyeMovePrep3 += Eyes
         saccade3 += Eyes
         self.encodeVisObject3 += Visual
         
     def hands2wheel(self):   #check 
         #tasks
         self.requHands2Wheel = self.S.Task('requHands2Wheel', length = 1)#5
         self.handsMotoPrep3 = self.S.Task('handsMotoPrep3', length = 1)#25
         self.handsMotoInit = self.S.Task('handsMotoInit', length = 1)#5         
         self.towheel = self.S.Task('towheel', length = 1)#mit Fitt's law!
         #order
         self.S += (self.requHands2Wheel <= self.handsMotoPrep3, self.handsMotoPrep3 <= self.handsMotoInit,
         self.handsMotoInit <= self.towheel, self.moveAttention1 < self.requHands2Wheel)#, self.hands2wheel < self.checkNear)
         
         
         
         #self.changeGoal < self.requHands2Wheel, self.quitNDRT < self.requHands2Wheel,
         #resources for tasks
         self.requHands2Wheel += Procedural
         self.handsMotoPrep3 += Hand
         self.handsMotoInit += Hand
         self.towheel += Hand
         
         
             
         
     def unoccupyHands(self):#check
         #tasks
         self.requUnoccupyHands = self.S.Task('requUnoccupyHands', length = 1)#5
         self.moveAttention5 = self.S.Task('moveAttention5', length = 1)#5
         self.moveAttention6 = self.S.Task('moveAttention6', length = 1)#5
         self.head2CoSeat = self.S.Task('head2CoSeat', length = 1)#60
         self.head2road = self.S.Task('head2road', length =1)#60
         self.drop = self.S.Task('drop', length = 1)#11
         self.eyeMovePrep4 = self.S.Task('eyeMovePrep4', length = 1)#25?
         self.saccade4 = self.S.Task('saccade4', length = 1)#5
         self.eyeMovePrep5 = self.S.Task('eyeMovePrep5', length = 1)#25?
         self.saccade5 = self.S.Task('saccade5', length = 1)#5
         self.encodeVisObject4 = self.S.Task('encodeVisObject4', length = 1)#9
         self.encodeVisObject5 = self.S.Task('encodeVisObject5', length = 1)#9
         #order
         self.S += (self.moveAttention1 < self.requUnoccupyHands,
         self.requUnoccupyHands <= self.moveAttention5,
         self.moveAttention5 < self.head2CoSeat,
         self.moveAttention5 < self.handsMotoPrep3,
         self.handsMotoPrep3 <= self.handsMotoInit,
         self.handsMotoInit <= self.drop,
         self.drop < self.head2road,
         self.moveAttention5 < self.eyeMovePrep4,
         self.eyeMovePrep4 <= self.saccade4, 
         self.saccade4 <= self.encodeVisObject4,
         self.saccade4 < self.head2road,
         self.moveAttention5 < self.moveAttention6,
         self.moveAttention6 <= self.requHands2Wheel,
         self.eyeMovePrep5 <= self.saccade5,
         self.saccade5 <= self.encodeVisObject5,
         self.requHands2Wheel <= self.requUnoccupyHands,
         self.moveAttention6 < self.head2road,
         self.moveAttention6 < self.eyeMovePrep5)
         #self.head2road < self.checkNear)
         #self.encodeVisObject5 < self.saccadeNear
         
         #self.drop <= self.towheel,
         #self.head2CoSeat < self.head2road, 
         #self.head2road < self.encodeVisObject5)
         
         #resources for tasks
         self.requUnoccupyHands += Procedural
         self.moveAttention5 += Procedural
         self.moveAttention6 += Procedural
         self.head2CoSeat += Head
         self.head2road += Head
         self.handsMotoPrep3 += Hand
         self.handsMotoInit += Hand
         self.drop += Hand
         self.eyeMovePrep4 += Eyes
         self.saccade4 += Eyes
         self.encodeVisObject4 += Visual
         self.eyeMovePrep5 += Eyes
         self.saccade5 += Eyes
         self.encodeVisObject5 += Visual
         
                 
         
     def feet2pedal(self):#check
         #tasks
         self.requMoveFeet = self.S.Task('requmoveFeet', length = 1)#5
         self.feetMotoPrep = self.S.Task('feetMotoPrep', length = 1)#25
         self.feetIni = self.S.Task('feetIni', length = 1)#5
         self.moveFeet = self.S.Task('moveFeet', length = 1)#19
         #order
         self.S += (self.changeGoal < self.requMoveFeet, 
         self.requMoveFeet <= self.feetMotoPrep, self.feetMotoPrep <= self.feetIni, 
         self.feetIni <= self.moveFeet),
         #self.moveFeet < self.requButton)
         #resources for tasks
         self.requMoveFeet += Procedural
         self.feetMotoPrep += Feet
         self.feetIni += Feet
         self.moveFeet += Feet 
         
         
     def TO(self):
         #tasks
         self.checkNear = self.S.Task('checkNear', length = 1)#5
         self.checkFar = self.S.Task('checkFar', length = 1)#5
         self.checkBack = self.S.Task('checkBack', length = 1)#5
         self.checkSide = self.S.Task('checkSide', length = 1)#5
         self.attendRoad2 = self.S.Task('attendRoad2', length = 1)#5
         self.requSourr = self.S.Task('requSourr', length = 1)#5
         self.requButton = self.S.Task('requButton', length = 1)#5
         self.headBack = self.S.Task('headBack', length = 1)#58
         self.headSide = self.S.Task('headSide', length = 1)#71
         self.headRoad = self.S.Task('headRoad', length = 1)#58 ?
         self.saccadeNear = self.S.Task('saccadeNear', length = 1)#5
         self.saccadeFar = self.S.Task('saccadeFar', length = 1)#5
         self.saccadeBack = self.S.Task('saccadeBack', length = 1)#5
         self.saccadeSide = self.S.Task('saccadeSide', length = 1)#5
         self.saccadeRoad = self.S.Task('saccadeRoad', length = 1)#5
         self.handsPrep = self.S.Task('handsPrep', length = 1)#25
         self.handsIni = self.S.Task('handsIni', length = 1)#5
         self.press = self.S.Task('press', length = 1)#10
         self.curvature = self.S.Task('curvature', length = 1)#20
         self.back = self.S.Task('back', length = 1)#20
         self.side = self.S.Task('side', length = 1)#20
         self.encodeVisObject6 = self.S.Task('encodeVisObject6', length = 1)#9
         self.encodeVisObject7 = self.S.Task('encodeVisObject7', length = 1)#9
         self.encodeVisObject8 = self.S.Task('encodeVisObject8', length = 1)#9
         self.encodeVisObject9 = self.S.Task('encodeVisObject9', length = 1)#9
         self.encodeVisObject10 = self.S.Task('encodeVisObject10', length = 1)#9
         #order
         self.S += (self.checkNear <= self.saccadeNear,
         self.saccadeNear <= self.encodeVisObject6,
         self.checkNear < self.checkFar, self.checkFar <= self.saccadeFar,
         self.saccadeFar <= self.encodeVisObject7, 
         self.encodeVisObject7 <= self.curvature,
         self.checkFar < self.checkBack,
         self.checkBack <= self.headBack,
         self.checkBack < self.saccadeBack,
         self.headBack < self.checkSide,
         self.saccadeBack <= self.encodeVisObject8,
         self.encodeVisObject8 <= self.back,
         self.saccadeBack < self.checkSide,
         self.checkSide <= self.headSide,
         self.checkSide < self.saccadeSide,
         self.saccadeSide <= self.encodeVisObject9,
         self.encodeVisObject9 <= self.side,
         self.headSide < self.attendRoad2,
         self.saccadeSide < self.attendRoad2,
         self.attendRoad2 <= self.headRoad,
         self.attendRoad2 < self.saccadeRoad, 
         self.saccadeRoad <= self.encodeVisObject10,
         self.encodeVisObject10 < self.requSourr, 
         self.requSourr < self.requButton,
         self.requButton < self.handsPrep, 
         self.handsPrep <= self.handsIni,
         self.handsIni <= self.press,
         self.moveAttention1 < self.checkNear)#, 
         #if hasattr(self, 'self.encodeVisObject1'):
         #    self.S += (self.encodeVisObject1 < self.checkNear)
         if hasattr(self, 'encodeVisObject3'):
             self.S += self.encodeVisObject3 < self.checkNear
         if hasattr(self, 'moveHead1'):
             self.S += self.moveHead1 < self.checkNear
         if hasattr(self, 'thoraxTurn'):    
             self.S += self.thoraxTurn < self.checkNear
             if hasattr(self, 'encodeVisObject1'):
                 self.S += self.thoraxTurn < self.encodeVisObject1
         if hasattr(self, 'moveAttention2'):
            self.S += self.moveAttention2 < self.checkNear
         #self.head2road < self.requSourr)
         
         #resources for task
         self.checkNear += Procedural
         self.checkFar += Procedural
         self.checkBack += Procedural
         self.checkSide += Procedural
         self.attendRoad2 += Procedural
         self.requSourr += Procedural
         self.requButton += Procedural
         self.headBack += Head
         self.headSide += Head
         self.headRoad += Head
         self.saccadeNear += Eyes
         self.saccadeFar += Eyes
         self.saccadeBack += Eyes
         self.saccadeSide += Eyes
         self.saccadeRoad += Eyes
         self.handsPrep += Hand
         self.handsIni += Hand
         self.press += Hand
         self.curvature += Working
         self.back += Working
         self.side += Working
         self.encodeVisObject6 += Visual
         self.encodeVisObject7 += Visual
         self.encodeVisObject8 += Visual
         self.encodeVisObject9 += Visual
         self.encodeVisObject10 += Visual
         
